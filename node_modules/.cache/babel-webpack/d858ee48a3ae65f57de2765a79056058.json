{"ast":null,"code":"import { Authentication } from './../models/authentication.model';\nimport { User } from './../models/user.model';\nimport { JWT } from './../models/jwt.model';\nimport * as i0 from \"@angular/core\";\n/**\r\n * Authentication Service provides operation on authentication of the user in application.\r\n */\n\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    /**\r\n     * Constructor\r\n     *\r\n     * @public\r\n     * @returns void\r\n     */\n    constructor() {\n      /**\r\n       * The Authentication stores Authentication model with information about user authentication in application in local storage, which stores string data\r\n       * To recieve then in is required to parse then to save the parsing time we are also holding it as attribute on object.\r\n       */\n    }\n    /**\r\n     * Authentication Service isAutheticate method determines if user is authenticated in application.\r\n     *\r\n     * @public\r\n     * @returns boolean\r\n     */\n\n\n    isAuthenticated() {\n      return window.localStorage.getItem(AuthenticationService.AUTHENTICATION) == null ? false : true;\n    }\n    /**\r\n     * Authentication Service authenticate verify user identity and returns true or false\r\n     * This method mocks the user authentication and not invoke API call and implements REQ. 3\r\n     *\r\n     * @public\r\n     * @param {string} login :  User login\r\n     * @param {string} password : User password\r\n     * @returns boolean\r\n     */\n\n\n    autheticate(login, password) {\n      /**\r\n       * Here should be API call for authentication which resolve Authentication Model class\r\n       */\n      if (login === AuthenticationService.AUTHENTICATION_USER_LOGIN && password === AuthenticationService.AUTHENTICATION_USER_PASSWORD) {\n        let authentication = new Authentication();\n        authentication.jwt = new JWT();\n        authentication.jwt.accessToken = \"tmp-access-token\";\n        authentication.jwt.expiresAt;\n        authentication.user = new User();\n        authentication.user.login = login;\n        authentication.user.password = password;\n        authentication.user.firstname = \"Firstname\";\n        authentication.user.firstname = \"lastname\";\n        this.setAuthentication(authentication);\n      }\n\n      return this.isAuthenticated();\n    }\n    /**\r\n     * Sets Athentication model to local storage\r\n     *\r\n     * @private\r\n     * @param {Authentication} authentication: Authentication model\r\n     * @returns void\r\n     */\n\n\n    setAuthentication(authentication) {\n      window.localStorage.setItem(AuthenticationService.AUTHENTICATION, JSON.stringify(authentication));\n    }\n    /**\r\n     * Gets Athentication model from local storage\r\n     *\r\n     * @public\r\n     * @returns Authentication|undefined\r\n     */\n\n\n    getAuthentication() {\n      let authenticationJson = window.localStorage.getItem(AuthenticationService.AUTHENTICATION);\n\n      if (authenticationJson !== null) {\n        return JSON.parse(authenticationJson);\n      }\n\n      return undefined;\n    }\n    /**\r\n     * Gets User model from local storage\r\n     *\r\n     * @public\r\n     * @returns User|unefined\r\n     */\n\n\n    getUser() {\n      let authentication = this.getAuthentication();\n\n      if (typeof authentication !== \"undefined\") {\n        return authentication.user;\n      }\n\n      return undefined;\n    }\n\n  }\n\n  AuthenticationService.AUTHENTICATION = \"AUTHENTICATION\";\n  AuthenticationService.AUTHENTICATION_USER_LOGIN = \"user\";\n  AuthenticationService.AUTHENTICATION_USER_PASSWORD = \"Passw0rd\";\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)();\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}