{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/api\";\nimport * as i2 from \"../../shared/service/product.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../shared/table/table.component\";\nexport let SalesComponent = /*#__PURE__*/(() => {\n  class SalesComponent {\n    constructor(messageService, productService, router) {\n      this.messageService = messageService;\n      this.productService = productService;\n      this.router = router;\n    }\n    /**\r\n     * Needed to load sales from product service once from server otherwise just listen on its change event.\r\n     * Subscribe to sales change event on product service and calls getSales method on product service.\r\n     * FIrst subscribe only data change event propagate changes to template, because they should be changed localy\r\n     * with add form or in table pop up form.\r\n     *\r\n     */\n\n\n    ngOnInit() {\n      this.productService.getSales().then(data => {\n        this.onProductSalesLoaded(data);\n      });\n    }\n    /**\r\n     *\r\n     */\n\n\n    onProductSalesLoaded(data) {\n      this.items = data;\n    }\n\n  }\n\n  SalesComponent.ɵfac = function SalesComponent_Factory(t) {\n    return new (t || SalesComponent)(i0.ɵɵdirectiveInject(i1.MessageService), i0.ɵɵdirectiveInject(i2.ProductService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  SalesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SalesComponent,\n    selectors: [[\"app-sales\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[\"title\", \"Sales\", \"name\", \"sales\", 3, \"items\"]],\n    template: function SalesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-table\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"items\", ctx.items);\n      }\n    },\n    directives: [i4.TableComponent],\n    styles: [\"\"]\n  });\n  return SalesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}